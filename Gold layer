Must Read;
  /* These scripts are for checking and indentifying meta data from sliver layer and then check 
for the data types from DDL tables and query (cleaned and modified) are match. If it does not match, modify data type and insert cleaned data for gold layer*/


-- === Gold Layer ====

-- crm_1 creat cst_info( customer information ) from CRM

CREATE TABLE cst_info (
	cst_id 				int,
    cst_key 			varchar(20),
    cst_firstname		varchar(30),
    cst_lastname		varchar(20),
    cst_marital_status	varchar(10),
    cst_gndr			varchar(20),
    cst_create_date		date
);

INSERT INTO gold.cst_info (
	cst_id 				,
    cst_key 			,
    cst_firstname		,
    cst_lastname		,
    cst_marital_status	,
    cst_gndr			,
    cst_create_date		
)
WITH CTE_cst_info  AS
(
SELECT 
	cst_id,
	cst_key,
	trim(cst_firstname) AS cst_firstname, 
    trim(cst_lastname) AS cst_lastname,
	CASE upper(cst_marital_status)
		WHEN 'M' THEN 'Marrige'
		WHEN 'S' THEN 'Single'
        ELSE 'N/A'
    END  AS cst_marital_status,
    CASE upper(cst_gndr) 
    WHEN 'M' THEN 'Male'
    WHEN 'F' THEN 'Femal'
    ELSE 'N/A'
    END AS cst_gndr ,
    cst_create_date,
ROW_NUMBER() OVER( PARTITION BY cst_id ORDER BY cst_create_date ) AS flag
FROM bronze.cst_info
)
SELECT 
	cst_id,
    cst_key,
    cst_firstname,
    cst_lastname,
    cst_marital_status,
    cst_gndr,
    cst_create_date
FROM
CTE_cst_info
WHERE flag = 1;  

-- check the gold result for cst_info
SELECT * FROM gold.cst_info;



-- crm_2 creat prd_info( product information ) from CRM

CREATE TABLE if not exists prd_info (
	prd_id			int,
    cat_key			varchar(20),
	prd_key 		varchar(20),
	prd_nm			varchar(50),
	prd_cost		int,
	prd_line		varchar(20),
	prd_start_dt	date,
	prd_end_dt		date
);

-- inserting prd_info for gold_layer

INSERT INTO gold.prd_info (
	prd_id			,
    cat_key			,
	prd_key 		,
	prd_nm			,
	prd_cost		,
	prd_line		,
	prd_start_dt	,
	prd_end_dt		
)
SELECT 
	prd_id,
	REPLACE(LEFT(prd_key,5) ,'-','_') AS cat_key,
	SUBSTRING(prd_key,7, length(prd_key)) AS prd_key,
	prd_nm,
	COALESCE( cast(prd_cost AS FLOAT), 0) AS prd_cost,
	CASE trim(upper(prd_line))     /*-- upper all letters and trim then into just letters ****/
		WHEN 'R' THEN 'Road'
		WHEN 'M' THEN 'Mountain'
		WHEN 'S' THEN 'Other sales'
		WHEN 'T' THEN 'Touring'
		ELSE 'N/A' 				-- in this case column prd_line may contain space, nextline, small letter and no_breaking space
	END AS prd_line,
    cast( prd_start_dt as date) as prd_start_dt,
	DATE_SUB(
			 LEAD (
					cast( prd_start_dt as date)) OVER( PARTITION BY prd_key ORDER BY cast( prd_start_dt as date) )
			, INTERVAL 1 DAY 
            )
	AS prd_end_date		/*-- coalesce(cast( prd_end_dt as date) , current_date()) as  prd_end_dt -- filling with current date*/
FROM bronze.prd_info; 

 -- check the gold result for prd_info
SELECT * FROM gold.prd_info;


-- crm_3 creat sales_detail from CRM

CREATE TABLE IF NOT EXISTS sales_detail (
	sls_ord_num 		varchar(20),
	sls_prd_key			varchar(20),
	sls_cust_id			int,
	sls_order_dt		date,
	sls_ship_dt			date,
	sls_due_dt			date,
	sls_sales			int,
	sls_quantity		int,
	sls_price			int
);

-- inserting sales_detail for gold_layer
INSERT INTO gold.sales_detail (
	sls_ord_num 		,
	sls_prd_key			,
	sls_cust_id			,
    sls_order_dt		,
	sls_ship_dt			,
	sls_due_dt			,
	sls_sales			,
	sls_quantity		,
	sls_price			
)

SELECT
sls_ord_num,
sls_prd_key, 
sls_cust_id,

    CASE
        WHEN sls_order_dt IS NULL 
             OR sls_order_dt = 0
             OR CHAR_LENGTH(sls_order_dt) < 8   -- invalid short values
        THEN NULL
        ELSE CAST(sls_order_dt AS DATE)
    END AS sls_order_dt ,
 
    CASE
        WHEN sls_ship_dt IS NULL 
             OR sls_ship_dt = 0
             OR CHAR_LENGTH(sls_ship_dt) < 8
        THEN NULL
        ELSE CAST(sls_ship_dt AS DATE)
    END AS sls_ship_dt,
    
    CASE
        WHEN sls_due_dt IS NULL 
             OR sls_due_dt = 0
             OR CHAR_LENGTH(sls_due_dt) < 8
        THEN NULL
        ELSE CAST(sls_due_dt AS DATE)
    END AS sls_due_dt,
CASE
    WHEN IFNULL(sls_sales,0) <= 0 OR sls_sales != sls_quantity* sls_price THEN sls_quantity * ABS(sls_price)
    ELSE sls_sales
    END AS sls_sales,
    sls_quantity,
CASE
    WHEN  IFNULL(sls_price,0) <= 0  THEN ABS(sls_sales) / sls_quantity
    ELSE sls_price
    END AS sls_price
FROM bronze.sales_detail;

 -- check the gold result for sales_detail
SELECT * FROM gold.sales_detail;


 




--  ERP  create tables FOR gold layer
-- erp-1 cst_az12

CREATE TABLE IF NOT EXISTS cst_az12  (
CID		VARCHAR(50),
BDATE	DATE,
GEN		VARCHAR(20)
);

 -- inserting cst_az12 for gold_layer

INSERT INTO gold.cst_az12 ( CID, BDATE, GEN)
SELECT 
	CASE 
		WHEN CID like 'NAS%' THEN SUBSTRING(CID,4,LENGTH(CID))
		ELSE CID 
		END AS CID,
    cast(
    CASE 
		WHEN BDATE > CURRENT_DATE() THEN CURRENT_DATE()
        ELSE BDATE 
        END AS DATE) AS BDATE,
	CASE 
		WHEN UPPER(TRIM(GEN)) IN ('F') THEN 'Female'
		WHEN UPPER(TRIM(GEN)) IN ('M') THEN 'Male'
		WHEN UPPER(TRIM(GEN)) IN (Null) THEN 'N/A'
        WHEN UPPER(TRIM(GEN)) IN ('') THEN 'N/A'
        ELSE GEN 
        END AS GEN
FROM bronze.cst_az12;

-- checking the gold result for cst_za12 from ERP
SELECT * FROM  gold.cst_az12;

-- ERP 2 crate table for loc_a101 location  

CREATE TABLE IF NOT EXISTS loc_a101 (
CID 		VARCHAR(50),
CNTRY 		VARCHAR(50)
);

 -- inserting loc_a101 for gold_layer
 
INSERT INTO gold.loc_a101( CID, CNTRY)
SELECT 
	REPLACE(CID,'-','') AS CID,
	CASE 
		WHEN TRIM(CNTRY) IS NULL THEN 'N/A'
        WHEN TRIM(CNTRY) = '' THEN 'N/A'
		WHEN TRIM(CNTRY) = 'US' THEN 'United State'
		WHEN TRIM(CNTRY) = 'USA' THEN 'United State'
		WHEN TRIM(CNTRY) = 'DE' THEN 'Germany'
		ELSE TRIM(CNTRY) 
	END AS CNTRY
FROM bronze.loc_a101;

-- checking the gold result for loc_al01 from ERP
SELECT CID, COUNT(CID) AS FLAG
FROM gold.loc_a101
GROUP BY CID
HAVING COUNT(CID) > 1;

SELECT * FROM  gold.loc_a101;

-- ERP 3 crate table for px_cat_g1v2 from erp

CREATE TABLE IF NOT EXISTS px_cat_g1v2(
ID 		VARCHAR(50),
CAT		VARCHAR(50),
SUBCAT	VARCHAR(50),
MAINTENANCE 	VARCHAR(50)
); 

-- inserting px_cat_g1v2 for gold_layer
INSERT INTO px_cat_g1v2(
			ID,
			CAT,
			SUBCAT,
			MAINTENANCE)
SELECT 
			ID,
			CAT,
			SUBCAT,
			MAINTENANCE
FROM bronze.px_cat_g1v2;

-- checking the gold result for px_cat_g1v2 from ERP

SELECT * FROM gold.px_cat_g1v2;
